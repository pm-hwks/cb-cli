// Code generated by go-swagger; DO NOT EDIT.

package v3_organization_id_stack

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v3 organization id stack API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v3 organization id stack API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateStackInOrganization creates stack in organization

An proxy Configuration describe a connection to an external proxy server which provides internet access cluster members. It's applied for package manager and Ambari too
*/
func (a *Client) CreateStackInOrganization(params *CreateStackInOrganizationParams) (*CreateStackInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStackInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createStackInOrganization",
		Method:             "POST",
		PathPattern:        "/v3/{organizationId}/stack",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateStackInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateStackInOrganizationOK), nil

}

/*
DeleteStackInOrganization deletes stack by name in organization

An proxy Configuration describe a connection to an external proxy server which provides internet access cluster members. It's applied for package manager and Ambari too
*/
func (a *Client) DeleteStackInOrganization(params *DeleteStackInOrganizationParams) (*DeleteStackInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStackInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStackInOrganization",
		Method:             "DELETE",
		PathPattern:        "/v3/{organizationId}/stack/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteStackInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteStackInOrganizationOK), nil

}

/*
GetStackInOrganization gets stack by name in organization

An proxy Configuration describe a connection to an external proxy server which provides internet access cluster members. It's applied for package manager and Ambari too
*/
func (a *Client) GetStackInOrganization(params *GetStackInOrganizationParams) (*GetStackInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStackInOrganization",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/stack/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetStackInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStackInOrganizationOK), nil

}

/*
ListStacksByOrganization lists stacks for the given organization

An proxy Configuration describe a connection to an external proxy server which provides internet access cluster members. It's applied for package manager and Ambari too
*/
func (a *Client) ListStacksByOrganization(params *ListStacksByOrganizationParams) (*ListStacksByOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStacksByOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listStacksByOrganization",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/stack",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListStacksByOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListStacksByOrganizationOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
