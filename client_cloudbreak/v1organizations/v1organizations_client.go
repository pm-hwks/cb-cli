// Code generated by go-swagger; DO NOT EDIT.

package v1organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v1organizations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v1organizations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ChangeOrganizationUsers changes users and their permissions in the organization

Organizations are a way of grouping resources, organization owners can add users to their organizations with different permission sets
*/
func (a *Client) ChangeOrganizationUsers(params *ChangeOrganizationUsersParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeOrganizationUsersParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeOrganizationUsers",
		Method:             "PUT",
		PathPattern:        "/v1/organizations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ChangeOrganizationUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteOrganization deletes an organization by id

Organizations are a way of grouping resources, organization owners can add users to their organizations with different permission sets
*/
func (a *Client) DeleteOrganization(params *DeleteOrganizationParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteOrganizationParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteOrganization",
		Method:             "DELETE",
		PathPattern:        "/v1/organizations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeletePrivateOrganization deletes an organization by name

Organizations are a way of grouping resources, organization owners can add users to their organizations with different permission sets
*/
func (a *Client) DeletePrivateOrganization(params *DeletePrivateOrganizationParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePrivateOrganizationParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePrivateOrganization",
		Method:             "DELETE",
		PathPattern:        "/v1/organizations/t/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePrivateOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetOrganization retrieves an organization by id

Organizations are a way of grouping resources, organization owners can add users to their organizations with different permission sets
*/
func (a *Client) GetOrganization(params *GetOrganizationParams) (*GetOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganization",
		Method:             "GET",
		PathPattern:        "/v1/organizations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganizationOK), nil

}

/*
GetOrganizationByName retrieves an organization by name

Organizations are a way of grouping resources, organization owners can add users to their organizations with different permission sets
*/
func (a *Client) GetOrganizationByName(params *GetOrganizationByNameParams) (*GetOrganizationByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganizationByName",
		Method:             "GET",
		PathPattern:        "/v1/organizations/t/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetOrganizationByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganizationByNameOK), nil

}

/*
GetOrganizations retrieves organizations

Organizations are a way of grouping resources, organization owners can add users to their organizations with different permission sets
*/
func (a *Client) GetOrganizations(params *GetOrganizationsParams) (*GetOrganizationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrganizationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrganizations",
		Method:             "GET",
		PathPattern:        "/v1/organizations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetOrganizationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrganizationsOK), nil

}

/*
PostOrganization creates an organization

Organizations are a way of grouping resources, organization owners can add users to their organizations with different permission sets
*/
func (a *Client) PostOrganization(params *PostOrganizationParams) (*PostOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postOrganization",
		Method:             "POST",
		PathPattern:        "/v1/organizations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOrganizationOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
